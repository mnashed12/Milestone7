package test;

import static org.junit.Assert.*;

import org.junit.Assert;
import org.junit.Test;

import base.Product;

public class ProductTest {

	@Test
	//Test if product object exists
	public void testProduct() {
		Product product = new Product();
		Assert.assertNotNull(product);
	}

	@Test
	//Test if product has name and is not null meaning displayProductDetails will function
	public void testDisplayProductDetails() {
		Product product = new Product();
		Assert.assertTrue(product.getName(), product != null);
	}

}
package test;

import static org.junit.Assert.*;

import org.junit.Test;

import base.Product;
import base.ShoppingCart;
import junit.framework.Assert;

public class ShoppingCartTest {
	
	@Test
	//Testing if the add method works by checking if Cart is empty or not null
	public void testAdd() {
		ShoppingCart Cart = new ShoppingCart();
		Assert.assertNotNull(Cart);
	}
	@Test
	//Testing if Cart returns Cart contents
	public void testGet() {
		ShoppingCart Cart = new ShoppingCart();
		Assert.assertEquals(Cart, Cart);
	}
}
package test;

import static org.junit.Assert.*;

import org.junit.Test;

import base.Product;
import base.ShoppingCart;
import base.Storefront;
import junit.framework.Assert;

public class StorefrontTest {
	Product product = new Product();
	@Test
	//If quantity != original quantity product method functions
	public void testPurchaseProduct() {
		Storefront Store = new Storefront();
		Assert.assertFalse(product.getQuantity() == product.getQuantity()-1);
	}

	@Test
	//If quantity == original quantity
	public void testCancelPurchase() {
		Storefront Store = new Storefront();
		Assert.assertTrue(product.getQuantity() != product.getQuantity() +1);
	}

	@Test
	//if store is not empty will return a store
	public void testViewStore() {
		Storefront Store = new Storefront();
		Assert.assertNotNull(Store);
	}

	@Test
	//if products are available will return product
	public void testViewProductInfo() {
		Assert.assertNotNull(product);
	}

}
package test;

import static org.junit.Assert.*;

import org.junit.Test;

import base.ShoppingCart;
import base.inventorymanager;
import junit.framework.Assert;

public class inventorymanagerTest {

	@Test
	//Testing if the add method works by checking if inventory is empty or not null
	public void testAdd() {
		inventorymanager inventory = new inventorymanager();
		Assert.assertNotNull(inventory);
	}	 
	@Test
	//Testing if inventory returns inventory contents
	public void testGet() {
		inventorymanager inventory = new inventorymanager();
		Assert.assertEquals(inventory, inventory);
	}
}
package test;

import static org.junit.Assert.*;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.junit.Test;

import com.fasterxml.jackson.annotation.JsonProperty.Access;

import junit.framework.Assert;

public class JsonFilesTest {
	@Test
	public void testSaveToFile() {
		File file = new File("InUsers.txt");
		Assert.assertTrue(file.canWrite());
	}
	@Test
	public void testReadFromFile() {
		File file = new File("InUsers.txt");
		Assert.assertTrue(file.canRead());
	}

}
package test;

import org.junit.runner.RunWith;
import org.junit.runners.Suite;
import org.junit.runners.Suite.SuiteClasses;

@RunWith(Suite.class)
@SuiteClasses({ inventorymanagerTest.class, JsonFilesTest.class, ProductTest.class, ShoppingCartTest.class,
		StorefrontTest.class })
public class AllTests {
}
